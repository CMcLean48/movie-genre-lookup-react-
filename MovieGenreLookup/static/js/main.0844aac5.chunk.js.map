{"version":3,"sources":["Movielist.js","App.js","serviceWorker.js","index.js"],"names":["Movielist","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedOverviewID","showOverview","bind","assertThisInitialized","id","setState","_this2","react_default","a","createElement","className","props","movies","map","item","key","title","release_date","src","poster_path","alt","onClick","e","overview","React","Component","API_KEY","BASE_URL","GENRES","App","d","Date","end","getFullYear","getMonth","getDate","setDate","start","console","log","apiKey","genre","page","loading","genres","selectedGenre","getMovies","handleGenreChange","nextPage","previousPage","getGenres","target","value","fetch","then","response","json","data","results","JSON","stringify","totalPages","total_pages","catch","error","alert","_this3","newPage","width","type","onChange","index","name","href","src_Movielist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0844aac5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\nclass Movielist extends React.Component{\n  \n  constructor(){\n  super();\n  this.state={\n    selectedOverviewID:null,\n\n  };\n  this.showOverview = this.showOverview.bind(this);\n}\n   showOverview(id){\n      // Change back to null if current item already selected.\n       if(id === this.state.selectedOverviewID) {\n          this.setState({selectedOverviewID:null});\n       }\n       else {\n          // store id of selected item.\n          this.setState({selectedOverviewID:id});\n       }\n\n     }\n\n render(){ \n    return(\n        <div>\n        {/* To show image add http://image.tmdb.org/t/p/w185/ to file name */}\n        { /*   <img src=\"http://image.tmdb.org/t/p/w185/nBNZadXqJSdt05SHLqgT0HuC5Gm.jpg\"></img> */}\n        <ul className=\"movieList\">\n        {this.props.movies.map((item)=>(\n          <li className = \"movie-item\" key={item.id}> \n          <h3 className = \"movie-title\">{item.title}</h3>\n          <p>release date:{item.release_date}</p>\n        \n         <img className =\"movie-poster\" src={\"http://image.tmdb.org/t/p/w185\" + item.poster_path}alt = {item.title + '_poster'}/>\n        {/*spare code in case show/hide of overview doesn't work*/}\n        {/* <p className =\"movie-overview\">{item.overview}</p>*/}\n\n      <button onClick={(e)=>this.showOverview(item.id)}>show details\n         </button> \n         {item.id === this.state.selectedOverviewID ? <p className =\"movie-overview\">{item.overview}</p> : <p></p> }\n\n           </li>\n        ))}\n        </ul> \n        </div>);\n\n        }\n}\n \n export default Movielist;","import React, {Component} from 'react';\nimport './App.css';\nimport Movielist from './Movielist';\n\nconst API_KEY   = 'f8b5c4c831f66ef931d7c63686ffe0c8';\nconst BASE_URL  = 'http://api.themoviedb.org/3/discover/movie?api_key='\n                + API_KEY;\n\nconst GENRES = 'https://api.themoviedb.org/3/genre/movie/list?api_key='\n             + API_KEY\n             + '&language=en-US';\n\nclass App extends Component {\n    \n    constructor() {\n        super();\n        \n        //get current date, plus a date 2 months in past,formatted for the api query.\n        let d = new Date(),\n            end = d.getFullYear() +'-' + (d.getMonth() + 1) + '-' + d.getDate();\n\n         let e = d.setDate(d.getDate() - 60),\n            start=d.getFullYear()+'-' + (d.getMonth() + 1)+'-'+ (d.getDate());\n\n           console.log(e);\n\n        this.state  = {\n          apiKey : API_KEY,\n          start : start,\n          end    : end,\n          genre : \"28 \",\n          page:1,\n          loading:'true',\n          movies : [],\n          genres : [],\n          selectedGenre  : '',\n          overview: false,\n          id : '',\n          title: '',\n          release_date:'',\n         \n          \n          \n        };\n        this.getMovies = this.getMovies.bind(this);\n        this.handleGenreChange = this.handleGenreChange.bind(this);\n        this.nextPage  = this.nextPage.bind(this);\n        this.previousPage = this.previousPage.bind(this);\n       \n    }\n    \n    // Called when constructor is finished building component.\n    componentDidMount() {\n      this.getMovies(this.state.page, this.state.start, this.state.end, this.state.genre);\n      this.getGenres();\n    }\n\n    handleGenreChange(e) {\n      this.setState({ selectedGenre: e.target.value, page: 1 });\n     // const url = \"http://moviedb.com?genre=\" + genre;\n   //   alert(\"Getting movie with genre id: \" + genre + \" at \"\n    //      + url  );\n    this.getMovies(this.state.page, this.state.start, this.state.end, e.target.value);\n    }\n    \n\n    getMovies(page,start,end,genre) {\n     \n        // Build string with base and start and end dates, page number and genre.\n        const URL        = BASE_URL + '&primary_release_date.gte=' + start\n                         +  '&primary_release_date.lte=' + end \n                         + '&page=' + page \n                         + '&with_genres=' + genre;\n\n        // Request and wait for data from remote server.\n        fetch(URL).then(response => response.json())\n            // Data retrieved so parse it.\n            .then((data) => {\n                this.setState({movies:data.results});\n              //  alert(\"Total pages= \" + data.total_pages)\n                console.log(JSON.stringify(data.results));\n                \n            \n              //set how many total pages for this instance of movies//\n                this.setState({totalPages : data.total_pages});\n            })\n            // Data is not retieved.\n            .catch((error) => {\n                alert(error);\n\n            });                          \n    }\n\n    getGenres() {\n        \n        // This code gets data from the remote server.\n        fetch(GENRES).then(response => response.json())\n\n        // Data is retrieved.\n        .then((data) => {\n            this.setState({genres:data.genres, loading:false});\n          //  console.log(JSON.stringify(data.genres));\n        })\n        // Data is not retrieved.\n        .catch((error) => {\n            alert(error);\n        });\n    }\n        //to page forward//\n        nextPage(e){\n            if(this.state.page < this.state.totalPages){\n                let newPage = this.state.page\n                newPage = newPage +=1;\n                this.setState({page:newPage});\n                this.getMovies(newPage, this.state.start, this.state.end,  this.state.genre);\n\n            }     \n    }\n        //previous page//\n        previousPage(e){\n        if(this.state.page > 1 ){\n            let newPage = this.state.page\n            newPage = newPage -=1;\n            this.setState({page:newPage});\n            this.getMovies(newPage, this.state.start, this.state.end,  this.state.genre);\n\n            }     \n    } \n        \n    render() {\n        return (  \n    <div className=\"container\">\n            <div className = \"titleItem\">\n                <table> \n                    <tbody>\n                         <tr>\n                            <td>\n                            <img width=\"60\" src=\"movie_roll.svg\" alt=\"movieroll\"></img>\n                            </td>\n                            <td>\n                            <h1>Movie Database Sort By Genre</h1>\n                            </td>\n                        </tr>\n                    </tbody>       \n                </table>\n            </div>        \n            <div >\n               {/* Genres */}\n               <p className=\"genreChangetitle\">Change Genre</p>\n              <select className=\"selection\"type='text' value={this.state.selectedGenre} \n                     onChange={this.handleGenreChange}>                  \n                    {this.state.genres.map((item, index)=>(\n                <option key={item.id} value={item.id}>{item.name}</option>\n                ))}\n              </select>\n              {this.state.selectedGenre}\n              <br/>\n              \n              <div className =\"page\">\n              \n              <button  onClick={this.previousPage}>&lt;&nbsp; Previous Page</button>\n              <p>&nbsp;Page Number:&nbsp;{this.state.page}&nbsp;of &nbsp;{this.state.totalPages} Pages</p>\n              &nbsp;<button onClick={this.nextPage}> Next Page&nbsp;&gt;</button>\n              <a className=\"anchor\"href= \"#bottom\" id=\"top\">go to bottom</a>\n\n             </div>\n             \n        \n          <Movielist movies={this.state.movies}></Movielist>\n\n          <footer>\n           \n          <button  onClick={this.previousPage}>&lt;&nbsp; Previous Page</button>\n          <button onClick={this.nextPage}> Next Page&nbsp;&gt;</button>\n          <a className =\"anchor\"href =\"#top\" id=\"bottom\">go to top</a>\n          <p>© 2018 Crystal McLean</p>\n          </footer>\n\n     </div>  \n            \n                \n        </div>  \n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}